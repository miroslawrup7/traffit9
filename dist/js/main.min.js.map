{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["import { translate_static, translate_dynamic } from './i18n.min.js'\r\n\r\n\"use strict\"\r\n\r\nconst jobLoc = document.querySelector(\".job\");\r\nconst jobLabelLoc = document.querySelector(\".job label\");\r\nconst jobInputLoc = document.querySelector(\".job input\");\r\nconst jobClearBtnLoc = jobLoc.querySelector(\".clear-btn\")\r\n\r\nconst cityLoc = document.querySelector(\".city\");\r\nconst cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListTitleLoc = document.querySelector(\".city .list-title\");\r\nconst citySelectedOptionsLoc = document.querySelector(\".city .selected-options\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\n\r\nconst distanceLoc = document.querySelector(\".distance\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListTitleLoc = document.querySelector(\".distance .list-title\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\n\r\nconst sectorLoc = document.querySelector(\".sector\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListTitleLoc = document.querySelector(\".sector .list-title\");\r\nconst sectorSelectedOptionsLoc = document.querySelector(\".sector .selected-options\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\n\r\nconst employmentFormLoc = document.querySelector(\".employment-form\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListTitleLoc = document.querySelector(\".employment-form .list-title\");\r\nconst employmentFormSelectedOptionsLoc = document.querySelector(\".employment-form .selected-options\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\n\r\nconst workingHoursLoc = document.querySelector(\".working-hours\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListTitleLoc = document.querySelector(\".working-hours .list-title\");\r\nconst workingHoursSelectedOptionsLoc = document.querySelector(\".working-hours .selected-options\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\n\r\nconst languageLoc = document.querySelector(\".language\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListTitleLoc = document.querySelector(\".language .list-title\");\r\nconst languageSelectedOptionsLoc = document.querySelector(\".language .selected-options\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\nconst pagesContainer = document.querySelector(\".pages-container\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \r\nconst jobTypeLoc = document.querySelector(\".working-hours ul\"); \r\nconst langLoc = document.querySelector(\".language ul\");\r\nconst citiesLoc = document.querySelector(\".city ul\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\n\r\nconst remoteLoc = document.querySelector(\".remote\");\r\nconst remoteInputLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\".relocation\");\r\nconst relocationInputLoc = document.querySelector(\"#relocation\");\r\nconst searchInputLoc = document.querySelector(\".job input\");\r\n\r\nconst distanceInputsLoc = document.querySelectorAll(\".distance input\");\r\nconst distanceTitleLoc = document.querySelector(\".distance .list-title\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst advancedSearchBar = document.querySelector(\".wrapper.five\");\r\nconst advancedSearchBtn = document.querySelector(\".advanced-search-btn .arrow-down\");\r\nconst advancedContainer = document.querySelector(\".advanced-container\");\r\n\r\nlet lang =\"PL\"\r\n\r\n// Send data from iframe to parent ///////////////////////////////////////////\r\n// const setParentIframeHeight = () => {\r\n//     const iframeHeight = document.body.scrollHeight\r\n//     window.parent.postMessage(iframeHeight, 'https://miroslawrup7.github.io');\r\n// }\r\n\r\n// =====================\r\n\r\njobLoc.addEventListener(\"click\", (e) => {\r\n    jobLabelLoc.classList.add(\"mini\");\r\n    jobInputLoc.classList.add(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0.5\";\r\n    jobClearBtnLoc.style.display = \"flex\";\r\n})\r\n\r\njobInputLoc.addEventListener(\"blur\", (event) => {\r\n    if (!event.target.value) {\r\n        jobLabelLoc.classList.remove(\"mini\");\r\n        jobInputLoc.classList.remove(\"active\");\r\n        jobClearBtnLoc.style.opacity = \"0\";\r\n        jobClearBtnLoc.style.display = \"none\";\r\n    }\r\n})\r\n\r\njobClearBtnLoc.addEventListener(\"click\", (e) => {\r\n    e.stopPropagation()\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n    searchBtn.click();\r\n})\r\n\r\nconst removePaddingBottomToFilterList = (filterList) => {\r\n    filterList.closest(\".element\").style.paddingBottom = \"\";\r\n    filterList.closest(\".element\").style.boxShadow = \"\";\r\n    filterList.closest(\".element\").style.height = \"\"\r\n}\r\n\r\n\r\nconst addPaddingBottomToFilterList = (filterList) => {\r\n    if (filterList.closest(\".element\").style.paddingBottom === \"\" ) {\r\n        const listCount = Array.from(document.querySelector(\".list\").querySelectorAll(\"ul\")).reduce((count, ul) => count + ul.querySelectorAll(\"li\").length, 0);\r\n        const liStyle = getComputedStyle(document.querySelector(\".list ul li\"));\r\n        const liStyleMarginBottom = parseInt(liStyle.marginBottom.split(0,-2));\r\n        const liStyleHeight = document.querySelector(\".list ul li\").offsetHeight;\r\n        const titleHeight = document.querySelector(\".list-title\").offsetHeight;\r\n        const totalCount = (listCount * (liStyleMarginBottom + liStyleHeight)) + titleHeight + (liStyleMarginBottom * 2);\r\n        const listHeight = totalCount > 400 ? 400 : totalCount;\r\n        \r\n        filterList.closest(\".element\").style.paddingBottom = \"15px\";\r\n        filterList.closest(\".element\").style.boxShadow = \"0px 0px 3px rgba(0,0,0,0.1)\";\r\n        filterList.closest(\".element\").style.height = listHeight +\"px\";\r\n    } else {\r\n        removePaddingBottomToFilterList(filterList);\r\n    }\r\n}\r\n\r\nconst dropDownListArray = [cityLoc, distanceLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc]\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.querySelector(\".list-title\").addEventListener(\"click\", () => {\r\n        elem.querySelector(\".list\").classList.toggle(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.toggle(\"rotate180\");\r\n        addPaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    })\r\n})\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.addEventListener(\"mouseleave\", () => {\r\n        elem.querySelector(\".list\").classList.remove(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\r\n        removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"touchstart\", function (event) {\r\n    const target = event.target;\r\n    const isTargetInArray = dropDownListArray.some(selector => {\r\n        let expand = selector.querySelector('.expand');\r\n\r\n        return selector.contains(expand) && !selector.contains(event.target);\r\n      });\r\n  \r\n    if (isTargetInArray) {\r\n        dropDownListArray.forEach((elem) => {\r\n            elem.querySelector(\".list\").classList.remove(\"expand\");\r\n            elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\r\n            removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n        });\r\n    }\r\n})\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet firstRecordNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterCountriesList = {};\r\nlet filteredRecordsArray_11;\r\nlet apiNumber\r\n\r\n// change distance label after choose\r\ndistanceInputsLoc.forEach((elem) => {\r\n    elem.addEventListener(\"change\", () => {\r\n        distanceTitleLoc.innerText = `+${Number(elem.value)} km`;\r\n        distanceTitleLoc.dataset.distance = Number(elem.value);\r\n        searchBtn.click();\r\n    })\r\n})\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\nconst filterListLocArray = [cityLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc];\r\nlet selectedOptionsInFilterArray = [[],[],[],[],[],[]];\r\n\r\nconst setClearBtn = () => {\r\n    filterListLocArray.forEach((elem, index) => {\r\n\r\n        // selectedOptionsInFilterArray.push([]);\r\n    \r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n    \r\n        clearBtn.addEventListener(\"mouseenter\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                clearBtn.style.opacity = \"1\";\r\n            }\r\n        });\r\n        \r\n        clearBtn.addEventListener(\"mouseleave\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"1\";\r\n                clearBtn.style.opacity = \"0\";\r\n            }\r\n        });\r\n    \r\n        clearBtn.addEventListener(\"click\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                selectedOptionsInFilterArray[index] = [];\r\n                clearBtn.style.opacity = \"0\";\r\n                elem.querySelectorAll(\"input\").forEach((el) => {\r\n                    el.checked = false;\r\n                })\r\n                filtersSelectedOptions.innerText = \"\";\r\n                filtersListTitle.classList.remove(\"mini\");\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                searchBtn.click();\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nsetClearBtn()\r\n\r\nconst actionAfterFilterInputChange = (e) => {\r\n    const filterParentLoc = e.target.closest(\".drop-down-container\");\r\n    const filtersQuantityBtn = filterParentLoc.querySelector(\".filters-quantity\");\r\n    const filtersListTitleLoc = filterParentLoc.querySelector(\".list-title\");\r\n    const filtersSelectedOptionsLoc = filterParentLoc.querySelector(\".selected-options\");\r\n   \r\n    const indexFilter = filterListLocArray.indexOf(filterParentLoc);\r\n\r\n    if (e.target.checked) {\r\n        selectedOptionsInFilterArray[indexFilter].push(e.target.value);\r\n    } else {\r\n        const indexDeletedItem = selectedOptionsInFilterArray[indexFilter].indexOf(e.target.id);\r\n        selectedOptionsInFilterArray[indexFilter].splice(indexDeletedItem,1);\r\n    }\r\n\r\n    selectedOptionsInFilterArray[indexFilter]\r\n\r\n    if (selectedOptionsInFilterArray[indexFilter].length !== 0) {\r\n        filtersListTitleLoc.classList.add(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"1\";\r\n        filtersQuantityBtn.innerText = selectedOptionsInFilterArray[indexFilter].length;\r\n    } else {\r\n        filtersListTitleLoc.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    }\r\n\r\n    filtersSelectedOptionsLoc.innerText = selectedOptionsInFilterArray[indexFilter].join(\", \");\r\n    searchBtn.click();\r\n}\r\n\r\nconst addListenerToFilterListsElements = () => {\r\n    \r\n    document.querySelectorAll(\".city ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n    \r\n    document.querySelectorAll(\".sector ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".employment-form ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".working-hours ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".language ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n};\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    console.log(\"record_boxes\", recordsArray)\r\n\r\n    for (let i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n            \r\n            if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_colorOnly.length) {\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"PT\") {\r\n                        borderColorClass = \"pt-border\";\r\n                        textColorClass = \"pt-text\";\r\n                    }\r\n                }\r\n\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"RS\") {\r\n                        borderColorClass = \"rs-border\";\r\n                        textColorClass = \"rs-text\";\r\n                    }\r\n                }\r\n\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"WEW\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                        borderColorClass = \"wew-border\";\r\n                        textColorClass = \"wew-text\";\r\n                    }\r\n                }\r\n            } else {\r\n                if (recordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n\r\n                const lang_PL_jobForm_id = translate_dynamic.forma[\"PL\"].indexOf(elem)\r\n                const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_jobForm_id]\r\n\r\n                    formaZatrudnienia = formaZatrudnienia + \"<p>\" + jobForm_in_lang + \"</p>\";\r\n                });\r\n            }\r\n\r\n            const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(recordsArray[i].branche)\r\n            const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\r\n\r\n            const lang_PL_jobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(recordsArray[i].jobType)\r\n            const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_jobType_id]\r\n\r\n            let remote_in_lang;\r\n            \r\n            if (recordsArray[i].remote === \"1\") {\r\n                remote_in_lang = translate_dynamic.zdalna[lang][0]\r\n            }\r\n\r\n            let relocation_in_lang;\r\n\r\n            if (recordsArray[i].relocation === \"1\") {\r\n                relocation_in_lang = translate_dynamic.relokacja[lang][0]\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\"beforeend\", \r\n            `<a href=\"${recordsArray[i].url }\" target=\"_blank\">\r\n                <div class=\"result ${borderColorClass}\">\r\n                    <div class=\"top\">\r\n                        <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${branche_in_lang ? branche_in_lang : \"\" }</div>\r\n                            <div class=\"name ${textColorClass}\">${recordsArray[i].name}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"bottom\">\r\n                        <div class=\"city-container\">\r\n                            <div class=\"city\"><img src=\"./img/location_dot.svg\">${recordsArray[i].city}</div>\r\n                        </div>\r\n                        <div class=\"details-container\">\r\n                            ${jobType_in_lang ? \"<div class='jobtype'>\" + jobType_in_lang + \"</div>\" : \"\"}\r\n                            ${recordsArray[i].visibleRate ? recordsArray[i].salaryFrom && recordsArray[i].salaryTo ? \"<div class='salary'>\" + recordsArray[i].salaryFrom + \" - \" + recordsArray[i].salaryTo + \"</div>\"  : \"\" : \"\"}\r\n                            ${remote_in_lang ? \"<div class='remote'>\" + remote_in_lang + \"</div>\" : \"\" }\r\n                            ${relocation_in_lang ? \"<div class='relocation'>\" + relocation_in_lang + \"</div>\" : \"\" }\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                </div>\r\n            </a>`\r\n            );\r\n        }\r\n    }\r\n    // setParentIframeHeight()\r\n};\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n=1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n=1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\",`<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n    \r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n\r\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\r\n    const jobFormChildrenLoc = jobFormLoc.querySelectorAll(\"li input\");\r\n    const jobTypeChildrenLoc = jobTypeLoc.querySelectorAll(\"li input\");\r\n    const langChildrenLoc = langLoc.querySelectorAll(\"li input\");\r\n    const citiesChildrenLoc = citiesLoc.querySelectorAll(\"li input\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    console.log(\"filteredRecordsArray\", filteredRecordsArray)\r\n\r\n    // selectedBranches ////////////////\r\n    let selectedBranches = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.id;\r\n            });\r\n    }\r\n    \r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_1  before Job Formes\", filteredRecordsArray_1)\r\n\r\n    // selectedJobForms ////////////////\r\n    let selectedJobForms = [];\r\n\r\n    selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.id;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_2 after JobForms before Job Types\", filteredRecordsArray_2)\r\n\r\n    // selectedJobTypes ////////////////\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.id;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_3 after job types  before langs\", filteredRecordsArray_3)\r\n\r\n    // selectedLangs ////////////////\r\n    let selectedLangs = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.language_filter.length) {\r\n        selectedLangs = filterConfigData.language_filter\r\n    } else {\r\n        selectedLangs = Array.from(langChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value\r\n            });\r\n    } \r\n    \r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_4 after Langs before Country\", filteredRecordsArray_4)\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = []\r\n    let filteredRecordsArray_5 = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_country_filter.length) {\r\n        selectedCountry = filterConfigData.location_country_filter\r\n        filteredRecordsArray_4.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            selectedCountry.forEach((selectedFiltr) => {\r\n                if (el.country === selectedFiltr) {\r\n                    addFlag = true\r\n                }\r\n            })\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4\r\n    }\r\n\r\n    let filteredRecordsArray_6 = filteredRecordsArray_5\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    console.log(\"filteredRecordsArray_6 after Country before City\", filteredRecordsArray_6)\r\n\r\n    let selectedCity = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_city_filter.length) {\r\n        selectedCity = filterConfigData.location_city_filter\r\n        cityLoc.style.display = \"none\"\r\n    } else {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n        .filter(function (elem) {\r\n            if (elem.value) {\r\n                return elem.checked\r\n            }\r\n        })\r\n        .map(function (elem) {\r\n            if (elem.value) {\r\n                return elem.value\r\n            }\r\n        })\r\n    }\r\n\r\n    console.log(\"selctedCity\", selectedCity)\r\n    \r\n    let filteredRecordsArray_7 = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n        distanceLoc.style.display = \"none\"\r\n    }\r\n\r\n    if (selectedCity.length) {\r\n        \r\n        let selectedDistance = parseInt(distanceTitleLoc.dataset.distance)\r\n\r\n        let lati\r\n        let longi\r\n        let min_lati\r\n        let max_lati\r\n        let min_longi\r\n        let max_longi\r\n\r\n        console.log(\"filteredRecordsArray_6 before foreach\", filteredRecordsArray_6)\r\n\r\n        selectedCity.forEach((el_city) => {\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (el_record.city === \"Sosnowiec\") { console.log(\"el_record\", el_record)}\r\n                if (el_city === el_record.city) {\r\n                    if (el_record.city === \"Sosnowiec\") { console.log(\"el_record2\", el_record)}\r\n                    lati = el_record.lati\r\n                    longi = el_record.longi\r\n                    if (el_record.city === \"Sosnowiec\") { console.log(\"lati\", lati)}\r\n                    if (el_record.city === \"Sosnowiec\") { console.log(\"longi\", longi)}\r\n                    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n                        selectedDistance = filterConfigData.location_distance\r\n                        distanceLoc.style.display = \"none\"\r\n                    }\r\n                    min_lati = lati - selectedDistance * 0.009044\r\n                    max_lati = lati + selectedDistance * 0.009044\r\n                    min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\r\n                    max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\r\n                }\r\n            })\r\n\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (\r\n                    el_record.lati <= max_lati &&\r\n                    el_record.lati >= min_lati &&\r\n                    el_record.longi <= max_longi &&\r\n                    el_record.longi >= min_longi\r\n                ) {\r\n                    filteredRecordsArray_7.push(el_record)\r\n                }\r\n            })\r\n        })\r\n        \r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_7 after City before Remote\", filteredRecordsArray_7)\r\n   \r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n        if (remoteInputLoc.checked || filterConfigData.remote_filter) {\r\n            filteredRecordsArray_7.forEach((el) => {\r\n                let addFlag = false\r\n\r\n                if (el.remote) {\r\n                    addFlag = true\r\n                }\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_8.push(el)\r\n                }\r\n            })\r\n        \r\n        } else {\r\n            filteredRecordsArray_8 = filteredRecordsArray_7\r\n        }\r\n\r\n        console.log(\"filteredRecordsArray_8 after REmote before Location\", filteredRecordsArray_8)\r\n\r\n    // selectedRelocation ////////////////\r\n    let filteredRecordsArray_9 = []\r\n\r\n    if (relocationInputLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            if (el.relocation) {\r\n                addFlag = true\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_9 after Location before search tekst\", filteredRecordsArray_9)\r\n\r\n    // searchText ////////////////\r\n\r\n    let filteredRecordsArray_10 = []\r\n\r\n    let searchText = searchInputLoc.value\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            let position\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true\r\n                    }\r\n                }\r\n            })\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase())\r\n            if (position !== -1) {\r\n                addFlag = true\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_10 after search tekst before recuirement type\", filteredRecordsArray_10)\r\n\r\n    // selectedRecruitmentType (coloring of records) ////////////////\r\n\r\n    filteredRecordsArray_11 = []\r\n    \r\n    let selectedRecruitmentType = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_filter.length) {\r\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter\r\n        filteredRecordsArray_10.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            selectedRecruitmentType.forEach((selectedFiltr) => {\r\n                if (el.recruitmentType === selectedFiltr) {\r\n                    addFlag = true\r\n                }\r\n            })\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_11.push(el)\r\n            }\r\n        })\r\n    }  else {\r\n        filteredRecordsArray_11 = filteredRecordsArray_10\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_11 after recuirement type\", filteredRecordsArray_11)\r\n\r\n    recordsNumber = filteredRecordsArray_11.length\r\n\r\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\r\n  \r\n    setPages(recordsNumber)\r\n    filtersON = true\r\n\r\n    // setParentIframeHeight()\r\n}\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n\r\n    if (filterConfigData) {\r\n        if (!filterConfigData.relocation_visible) {\r\n            relocationLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.language_visible) {\r\n            languageLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.remote_visible) {\r\n            remoteLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.location_visible) {\r\n            cityLoc.classList.add(\"unactive\");\r\n            distanceLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.branche_visible) {\r\n            sectorLoc.classList.add(\"unactive\");\r\n        }\r\n    }\r\n    \r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        \r\n        filterBranchesList.forEach(function (el) {\r\n\r\n            const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(el)\r\n            const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\r\n\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${branche_in_lang}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${branche_in_lang}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobFormList.forEach(function (el) {\r\n\r\n            const lang_PL_JobForm_id = translate_dynamic.forma[\"PL\"].indexOf(el)\r\n            const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_JobForm_id]\r\n\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${jobForm_in_lang}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${jobForm_in_lang}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobTypeList.forEach(function (el) {\r\n\r\n            const lang_PL_JobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(el)\r\n            const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_JobType_id]\r\n\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${jobType_in_lang}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${jobType_in_lang}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nlet globActivePageNo;\r\n\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n\r\n    \r\n    // setParentIframeHeight()\r\n};\r\n\r\nconst movePrevPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\r\n    );\r\n    let lastDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\r\n    );\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n    }\r\n\r\n    if (firstDispalyedPageNo > 1) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo - 1; n <= lastDispalyedPageNo - 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc + 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n            );\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 2) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\r\n            );\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nconst moveNextPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\r\n    );\r\n    let lastDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\r\n    );\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n        globActivePageNo = activePageNo;\r\n    }\r\n\r\n    if (lastDispalyedPageNo < pagesQuantityCalc) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo + 1; n <= lastDispalyedPageNo + 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc - 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n            );\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 0) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\r\n            );\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(\r\n        document.body.scrollWidth,\r\n        document.documentElement.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth\r\n    );\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(\r\n        document.body.scrollHeight,\r\n        document.documentElement.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight\r\n    );\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nlet maxPageBtns;\r\n\r\nconst setPagesBtnQuantity = () => {\r\n\r\nlet newMaxPageBtns;\r\n\r\n    if (getWidth() < 500) {newMaxPageBtns = 3}\r\n    if (getWidth() >= 500 && getWidth() < 650) {newMaxPageBtns = 3}\r\n    if (getWidth() >= 650 && getWidth() < 750) {newMaxPageBtns = 4}\r\n    if (getWidth() >= 750 && getWidth() < 950) {newMaxPageBtns = 7}\r\n    if (getWidth() >= 950 && getWidth() < 1200) {newMaxPageBtns = 12}\r\n    if (getWidth() >= 1200) {newMaxPageBtns = 15}\r\n\r\n    if (newMaxPageBtns !== maxPageBtns) {\r\n        maxPageBtns = newMaxPageBtns\r\n        setPages(recordsNumber);\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    setPagesBtnQuantity();\r\n});\r\n\r\nsetPagesBtnQuantity();\r\n\r\nconst filterAwarded = (configFilterArray, awardedRecordsArray, property) => {\r\n    \r\n    for (let i = awardedRecordsArray.length-1; i>=0; i--) {\r\n\r\n        let findFlag = false;\r\n        configFilterArray.forEach((element)=>{\r\n          \r\n            if (awardedRecordsArray[i][property] === element) {\r\n                findFlag = true;\r\n            }\r\n        })\r\n\r\n        if (!findFlag) {\r\n            awardedRecordsArray.splice(i, 1)\r\n        }\r\n    }\r\n}\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;  \r\n    });\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n\r\n        if (filterConfigData) {\r\n\r\n            if (filterConfigData.remote_filter) {\r\n                awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                    return elem.remote;\r\n                });\r\n            }\r\n            \r\n            if (filterConfigData.language_filter.length > 0) {\r\n                filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n            }\r\n\r\n            if (filterConfigData.branche_filter.length > 0) {\r\n                filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n            }\r\n\r\n            if (filterConfigData.location_country_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n            }\r\n\r\n            if (filterConfigData.location_city_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n            }\r\n\r\n            if (filterConfigData.recruitmentType_filter.length > 0) {\r\n                filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n            }\r\n\r\n        }\r\n\r\n        for (let i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n\r\n                        const lang_PL_jobForm_id = translate_dynamic.forma[\"PL\"].indexOf(elem)\r\n                        const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_jobForm_id]\r\n\r\n                        formaZatrudnienia = formaZatrudnienia + \"<p>\" + jobForm_in_lang + \"</p>\";\r\n                    });\r\n                }\r\n\r\n\r\n                const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(awardedRecordsArray[i].branche)\r\n                const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\r\n    \r\n                const lang_PL_jobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(awardedRecordsArray[i].jobType)\r\n                const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_jobType_id]\r\n\r\n                let remote_in_lang;\r\n            \r\n                if (awardedRecordsArray[i].remote === \"1\") {\r\n                    remote_in_lang = translate_dynamic.zdalna[lang][0]\r\n                }\r\n\r\n                let relocation_in_lang;\r\n\r\n                if (awardedRecordsArray[i].relocation === \"1\") {\r\n                    relocation_in_lang = translate_dynamic.relokacja[lang][0]\r\n                }\r\n\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${\r\n                        awardedRecordsArray[i].url\r\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                branche_in_lang\r\n                                    ? branche_in_lang\r\n                                    : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                        awardedRecordsArray[i].name\r\n                    }</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            awardedRecordsArray[i].city\r\n                        }</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${\r\n                            remote_in_lang\r\n                                ? \"<div class='remote'>\" + remote_in_lang + \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            relocation_in_lang\r\n                                ? \"<div class='relocation'>\" + relocation_in_lang + \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            jobType_in_lang\r\n                                ? \"<div class='jobtype'>\" +\r\n                                jobType_in_lang +\r\n                                \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].visibleRate\r\n                                ? awardedRecordsArray[i].salaryFrom &&\r\n                                awardedRecordsArray[i].salaryTo\r\n                                    ? \"<div class='salary'>\" +\r\n                                    awardedRecordsArray[i].salaryFrom +\r\n                                    \" - \" +\r\n                                    awardedRecordsArray[i].salaryTo +\r\n                                    \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        awardedResultsLoc.style.margin = \"0\"\r\n    }\r\n}\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\n// const summariseDownload = (recordsNumber) => {\r\n//     recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n//     if (!recordsNumber) {\r\n//         noResultsLoc.classList.add(\"active\");\r\n//     } else {\r\n//         noResultsLoc.classList.remove(\"active\");\r\n//     }\r\n// }\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n\r\n    // BranchesList\r\n   \r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche)\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche)\r\n        }\r\n    }\r\n\r\n    // JobFormList\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach((elem) => {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem)\r\n            }\r\n        })\r\n    }\r\n\r\n    // JobTypeList\r\n\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType)\r\n    }\r\n\r\n    // LangList\r\n\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n        if (Object.keys(filterConfigData).length !== 0) {\r\n            if (filterConfigData.language_filter.length) {\r\n                if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n                    filterLangList.push(lang)\r\n                }\r\n            } else {\r\n                filterLangList.push(lang)\r\n            }\r\n        } else {\r\n            filterLangList.push(lang)\r\n        }\r\n    }\r\n\r\n    // CountriesList\r\n\r\n    if (Object.keys(filterConfigData).length !== 0) {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = []\r\n        }\r\n        if (filterConfigData.location_city_filter.length) {\r\n            if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else if (filterConfigData.location_country_filter.length) {\r\n            if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else {\r\n            if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        }\r\n    } else {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = []\r\n        }\r\n        if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n\r\n        let parsedJobLocation;\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n}\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n}\r\n\r\n// gets DATA FROM API 2 ///////////////////////////////////////////////\r\nconst getAPI_2 = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://rsgrupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n}\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0 && apiNumber === 1) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData)\r\n        apiPage++\r\n        createRecordsObjFromAPI(apiPage, filterConfigData)\r\n    } else if (jsonData.length === 0  && apiNumber === 1) {\r\n        apiPage = 1\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\r\n    } else if (jsonData.length > 0  && apiNumber === 2) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData)\r\n        apiPage++\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\r\n    } else {\r\n        reworkData(rawAPIArray)\r\n        recordsNumber = rawAPIArray.length\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData)\r\n        setPages(recordsNumber)\r\n        createFilterLists(filterConfigData)\r\n        addListenerToFilterListsElements()\r\n        createFilteredRecordsArray()\r\n        distanceInputsLoc.forEach((elem) => {\r\n            elem.checked = false\r\n        })\r\n        jobInputLoc.value = \"\"\r\n    }\r\n}\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    apiNumber = 1\r\n    const rawData = await getAPI(apiPage)\r\n    const jsonData = await rawData.json()\r\n    loopOnAPI(jsonData, filterConfigData)\r\n}\r\n\r\nasync function createRecordsObjFromAPI_2(apiPage, filterConfigData) {\r\n    apiNumber = 2\r\n    const rawData = await getAPI_2(apiPage)\r\n    const jsonData = await rawData.json()\r\n    loopOnAPI(jsonData, filterConfigData)\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n}\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n        loadLanguages();\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\r\n    recordsOnPage = parseInt(e.target.value);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\r\n        : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n\r\n    // setParentIframeHeight()\r\n})\r\n\r\n// SEARCH LISTENER /////////////////////////////////////////////////////////////\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\r\n\r\nadvancedSearchBar.addEventListener(\"click\", () => {\r\n    advancedContainer.classList.toggle(\"showed\");\r\n    advancedSearchBtn.classList.toggle(\"rotate180\");\r\n    // setParentIframeHeight()\r\n})\r\n\r\nconst clearAllFiltersLoc = document.querySelector(\".clear-all-filters\")\r\n\r\nclearAllFiltersLoc.addEventListener(\"click\", () => {\r\n\r\n    filterListLocArray.forEach((elem, index) => {\r\n\r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n\r\n        selectedOptionsInFilterArray[index] = [];\r\n        clearBtn.style.opacity = \"0\";\r\n        elem.querySelectorAll(\"input\").forEach((el) => {\r\n            el.checked = false;\r\n        })\r\n        filtersSelectedOptions.innerText = \"\";\r\n        filtersListTitle.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    })\r\n\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n\r\n    distanceLoc.querySelectorAll(\"input\").forEach((elem) => {\r\n        elem.checked = false;\r\n    })\r\n    distanceListTitleLoc.innerText = \"+0 km\";\r\n    createFilteredRecordsArray();\r\n});\r\n\r\njobInputLoc.addEventListener(\"keypress\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"blur\", () => {\r\n    if (jobInputLoc.value !== \"\") {\r\n        searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"input\", () => {\r\n    if (jobInputLoc.value === \"\") {\r\n      searchBtn.click();\r\n    }\r\n});\r\n\r\nremoteInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n})\r\n\r\nrelocationInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// LANGUAGES\r\n\r\nconst loadLanguages = () => {\r\n\r\n    lang = filterConfigData.set_language\r\n\r\n    if (lang !== \"PL\" && lang !== \"EN\" && lang !== \"RU\" && lang !== \"UK\") { lang = \"PL\" }\r\n\r\n    const createDB = () => {\r\n        let openRequest = indexedDB.open(\"languageDB\", 1);\r\n\r\n        openRequest.onupgradeneeded = function () {\r\n            let db = openRequest.result;\r\n            if (!db.objectStoreNames.contains(\"language\")) {\r\n                db.createObjectStore(\"language\", { autoIncrement: true });\r\n            }\r\n        };\r\n    }\r\n\r\n    const saveLng = (lng) => {\r\n        let openRequest = indexedDB.open(\"languageDB\");\r\n\r\n        openRequest.onsuccess = function () {\r\n            let db = openRequest.result;\r\n            let transaction = db.transaction(\"language\", \"readwrite\");\r\n            let languageTrans = transaction.objectStore(\"language\");\r\n\r\n            let lang = lng;\r\n\r\n            let request = languageTrans.put(lang, \"lang\");\r\n\r\n            request.onsuccess = function () {};\r\n\r\n            request.onerror = function () {\r\n                console.log(\"Error\", request.error);\r\n            };\r\n        };\r\n    }\r\n\r\n    const getLng = () => {\r\n        let openRequest = indexedDB.open(\"languageDB\");\r\n\r\n        openRequest.onsuccess = function () {\r\n            let db = openRequest.result;\r\n            let transaction = db.transaction(\"language\");\r\n            let languageTrans = transaction.objectStore(\"language\");\r\n\r\n            let request = languageTrans.get(\"lang\");\r\n\r\n            request.onsuccess = function () {\r\n                languageSet(request.result)\r\n            }\r\n\r\n            request.onerror = function () {\r\n                console.log(\"Error\", request.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const languageSet = (lang) => {\r\n        for (let objKey in translate_static[lang]) {\r\n            document.getElementById(objKey).innerText = translate_static[lang][objKey]\r\n        }\r\n    }\r\n\r\n    createDB()\r\n\r\n    getLng()\r\n\r\n    saveLng(lang)\r\n\r\n    languageSet(lang);\r\n}"],"file":"main.min.js"}